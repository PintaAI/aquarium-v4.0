generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  name      String
  role      String
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  name                 String?
  role                 UserRole               @default(USER)
  plan                 UserPlan               @default(FREE)
  emailVerified        DateTime?
  image                String?
  password             String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  authoredCourses      Course[]               @relation("CourseAuthor")
  joinedCourses        Course[]               @relation("CourseMembers")
  authoredArticles     Article[]              @relation("ArticleAuthor")
  accounts             Account[]
  sessions             Session[]
  moduleCompletions    UserModuleCompletion[]
  vocabularyCollections VocabularyCollection[]
  createdRooms         Room[]                 @relation("RoomCreator")
  joinedRooms          Room[]                 @relation("RoomParticipants")
  pushSubscription     PushSubscription?
}

enum UserRole {
  USER
  GURU
  MURID
  ADMIN
}

enum UserPlan {
  FREE
  PAID
}

model Course {
  id              Int          @id @default(autoincrement())
  title           String
  description     String?
  jsonDescription String?
  htmlDescription String?
  level           CourseLevel
  thumbnail       String?
  icon            String?
  isCompleted     Boolean      @default(false)
  isLocked        Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  author          User         @relation("CourseAuthor", fields: [authorId], references: [id])
  authorId        String
  members         User[]       @relation("CourseMembers")
  modules         Module[]     @relation("CourseModules")
  rooms           Room[]       @relation("CourseRooms")
}

model Room {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  isActive          Boolean  @default(true)
  livekitRoomId     String?  @unique
  livekitRoomName   String?
  livekitSessionId  String?
  startTime         DateTime?
  endTime           DateTime?
  maxParticipants   Int?     @default(10)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  creator           User     @relation("RoomCreator", fields: [creatorId], references: [id])
  creatorId         String
  course            Course   @relation("CourseRooms", fields: [courseId], references: [id])
  courseId          Int
  participants      User[]   @relation("RoomParticipants")
}

model Module {
  id               Int      @id @default(autoincrement())
  title            String
  description      String
  jsonDescription  String
  htmlDescription  String
  order            Int
  isCompleted      Boolean  @default(false)
  isLocked         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  course           Course   @relation("CourseModules", fields: [courseId], references: [id])
  courseId         Int
  completions      UserModuleCompletion[]
}

model Article {
  id               Int      @id @default(autoincrement())
  title            String
  description      String?
  jsonDescription  String
  htmlDescription  String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  author           User     @relation("ArticleAuthor", fields: [authorId], references: [id])
  authorId         String
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserModuleCompletion {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  module      Module   @relation(fields: [moduleId], references: [id])
  moduleId    Int
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, moduleId])
}

model VocabularyCollection {
  id          Int               @id @default(autoincrement())
  title       String
  description String?
  isPublic    Boolean          @default(false)
  user        User?            @relation(fields: [userId], references: [id])
  userId      String?
  items       VocabularyItem[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model VocabularyItem {
  id           Int                  @id @default(autoincrement())
  korean       String
  indonesian   String
  isChecked    Boolean              @default(false)
  collection   VocabularyCollection @relation(fields: [collectionId], references: [id])
  collectionId Int
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
